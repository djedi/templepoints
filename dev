#!/bin/bash

# Temple Points Developer Script
# Provides a smooth development experience with hot reload, port management, and logging

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEFAULT_PORT=8080
PORT=${PORT:-$DEFAULT_PORT}
LOG_FILE="dev.log"
DB_FILE="templepoints.db"

# Print colored messages
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check dependencies
check_dependencies() {
    log_info "Checking dependencies..."
    
    if ! command -v go &> /dev/null; then
        log_error "Go is not installed. Please install Go 1.21 or higher."
        exit 1
    fi
    
    # Check Go version
    GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
    log_success "Go $GO_VERSION found"
    
    # Check for go.mod
    if [ ! -f "go.mod" ]; then
        log_error "go.mod not found. Are you in the right directory?"
        exit 1
    fi
}

# Handle port conflicts
handle_port() {
    local port=$1
    
    if lsof -i :$port &> /dev/null; then
        log_warning "Port $port is already in use"
        
        # Show what's using the port
        echo -e "${YELLOW}Process using port $port:${NC}"
        lsof -i :$port | grep LISTEN | head -1
        
        echo ""
        echo "Options:"
        echo "  1) Kill the process and use port $port"
        echo "  2) Use a different port"
        echo "  3) Cancel"
        echo ""
        read -p "Choose an option (1-3): " choice
        
        case $choice in
            1)
                log_info "Killing process on port $port..."
                kill -9 $(lsof -t -i :$port) 2>/dev/null || true
                sleep 1
                log_success "Port $port is now free"
                ;;
            2)
                read -p "Enter a new port number: " new_port
                PORT=$new_port
                log_info "Using port $PORT"
                # Recursively check the new port
                handle_port $PORT
                ;;
            3)
                log_info "Cancelled"
                exit 0
                ;;
            *)
                log_error "Invalid option"
                exit 1
                ;;
        esac
    else
        log_success "Port $port is available"
    fi
}

# Download dependencies
setup_dependencies() {
    if [ ! -d "vendor" ] && [ -f "go.mod" ]; then
        log_info "Downloading Go dependencies..."
        go mod download
        go mod tidy
        log_success "Dependencies installed"
    fi
}

# Database management
manage_database() {
    if [ ! -f "$DB_FILE" ]; then
        log_info "Database will be created on first run"
    else
        log_info "Using existing database: $DB_FILE"
        echo "  Database size: $(du -h $DB_FILE | cut -f1)"
        
        read -p "Do you want to reset the database? (y/N): " reset_db
        if [ "$reset_db" = "y" ] || [ "$reset_db" = "Y" ]; then
            log_warning "Backing up current database..."
            cp $DB_FILE "$DB_FILE.backup.$(date +%Y%m%d_%H%M%S)"
            rm $DB_FILE
            log_success "Database will be recreated with seed data"
        fi
    fi
}

# Cleanup function
cleanup() {
    echo ""
    log_info "Shutting down..."
    
    # Kill the Go process if it's running
    if [ ! -z "$GO_PID" ] && kill -0 $GO_PID 2>/dev/null; then
        kill $GO_PID 2>/dev/null || true
        wait $GO_PID 2>/dev/null || true
    fi
    
    log_success "Server stopped"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Clear screen for better visibility
clear

echo "======================================"
echo "   🏆 Temple Points Tracker Dev Mode"
echo "======================================"
echo ""

# Run checks
check_dependencies
handle_port $PORT
setup_dependencies
manage_database

echo ""
log_info "Starting server on port $PORT..."

# Start the server with proper error handling
PORT=$PORT go run . 2>&1 | tee -a $LOG_FILE &
GO_PID=$!

# Wait for server to start
sleep 2

# Check if server started successfully
if kill -0 $GO_PID 2>/dev/null; then
    log_success "Server is running!"
    echo ""
    echo "  📍 Local URL: http://localhost:$PORT"
    echo "  📊 API Docs:  http://localhost:$PORT/api/leaderboard"
    echo "  🔐 Admin:     admin@templepoints.org / admin123"
    echo ""
    echo "  📝 Logs are being saved to: $LOG_FILE"
    echo ""
    echo "  Press Ctrl+C to stop the server"
    echo ""
    
    # Open browser based on OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open "http://localhost:$PORT" 2>/dev/null || true
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open "http://localhost:$PORT" 2>/dev/null || true
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        # Windows
        start "http://localhost:$PORT" 2>/dev/null || true
    fi
    
    # Show live logs
    log_info "Showing live logs (tail -f $LOG_FILE)..."
    echo "----------------------------------------"
    
    # Wait for the server process
    wait $GO_PID
else
    log_error "Failed to start server. Check the logs:"
    tail -20 $LOG_FILE
    exit 1
fi